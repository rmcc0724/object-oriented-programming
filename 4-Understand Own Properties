In the following example, the Bird constructor defines two properties: name and numLegs:

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let duck = new Bird("Donald");
let canary = new Bird("Tweety");
name and numLegs are called own properties, because they are defined directly on the instance object. That means that duck and canary each has its own separate copy of these properties.

In fact every instance of Bird will have its own copy of these properties.

The following code adds all of the own properties of duck to the array ownProps:

let ownProps = [];

for (let property in duck) {
  if(duck.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}

console.log(ownProps); // prints [ "name", "numLegs" ]

Add the own properties of canary to the array ownProps.


//Here we have the constructor function Bird
function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}
//An instance of Bird is created and assigned to canary
let canary = new Bird("Tweety");

//Delcare a new Array call ownProps
let ownProps = [];

//Go through the object and if they have they're own properties push that property into an array

for (let property in canary) {
  if(canary.hasOwnProperty(property)) {
    ownProps.push(property);
  }
}
//Display the new Array
console.log(ownProps);

//Create an iterate function that goes through the keys of an object and returns the values of each key
const iterate = val => {
  for(var key in val) {
    console.log(val[key])
  }
}

console.log(iterate(canary));
